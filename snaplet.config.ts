// eslint-disable-next-line @typescript-eslint/triple-slash-reference
/// <reference path=".snaplet/snaplet.d.ts" />
// This config was generated by Snaplet make sure to check it over before using it.
import { copycat } from "@snaplet/copycat";
import { defineConfig } from "snaplet";
copycat.setHashKey("jGlmYLwja7lnJ3C9");
export default defineConfig({
  generate: {
    plan({ snaplet, pipe }) {
      // This is an example generate plan. It's a starting point, but you'll probably need to
      // give snaplet more detail about the plan for it to fit your application logic better.
      //
      // For more on how to do this, check out the docs:
      // https://docs.snaplet.dev/reference/configuration#generate

      return pipe(
        snaplet.Career({ count: 10 }),
        snaplet.Project({ count: 10 })
        // snaplet.Config({ data: { avatar: }})
      );
    },
  },
  transform: {
    public: {
      Career({ row }) {
        return {
          cover: {
            [copycat.word(row.cover)]: copycat.words(row.cover),
          },
          description: {
            [copycat.word(row.description)]: copycat.words(row.description),
          },
          index: copycat.int(row.index, {
            min: 0,
            max: Math.pow(4, 8) - 1,
          }),
        };
      },
      Config({ row }) {
        return {
          avatar: {
            [copycat.word(row.avatar)]: copycat.words(row.avatar),
          },
          displayEmail: copycat.email(row.displayEmail),
          id: copycat
            .int(row.id, {
              min: 1,
              max: Math.pow(4, 8) - 1,
            })
            .toString(),
          latitude: copycat
            .float(row.latitude, {
              min: -90,
              max: 90,
            })
            .toString(),
          location: copycat.sentence(row.location),
          longitude: copycat
            .float(row.longitude, {
              min: -90,
              max: 90,
            })
            .toString(),
          twitter: copycat.fullName(row.twitter),
        };
      },
      Note({ row }) {
        return {
          content: {
            [copycat.word(row.content)]: copycat.words(row.content),
          },
          cover: {
            [copycat.word(row.cover)]: copycat.words(row.cover),
          },
          slug: copycat.uuid(row.slug),
        };
      },
      Project({ row }) {
        return {
          cover: {
            [copycat.word(row.cover)]: copycat.words(row.cover),
          },
          description: {
            [copycat.word(row.description)]: copycat.words(row.description),
          },
        };
      },
      User({ row }) {
        return {
          email: copycat.email(row.email),
          name: copycat.username(row.name),
          password: copycat.password(row.password),
        };
      },
      _prisma_migrations({ row }) {
        return {
          checksum: copycat.scramble(row.checksum),
        };
      },
    },
  },
});
