---
import type { CollectionEntry } from "astro:content"
import ArrowUpRight from "./icons/arrow-up-right.astro"
import Img from "./img.astro"
import A from "./a.astro"
import X from "./icons/x.astro"

import Paper from "../assets/worn-dots.png"

export type Props = {
    idx: number
    cover: string
    title: string
    subtitle?: string
    techstack?: string[]
    isClickDisabled?: boolean
    href?: string
    isExternalLink?: boolean
    meta?: string
    render: CollectionEntry<"bio">["render"]
}

const { idx, cover, title, subtitle, render, techstack, href, isExternalLink, isClickDisabled, meta } = Astro.props

const { Content } = render ? await render() : { Content: null }

const delayRules = "ease-out delay-0 group-hover:delay-300 group-hover:ease-out"

const isLink = Boolean(href)
const Component = isLink ? 'a' : "button"
---

<Component
    class:list={[
       "h-[27.5rem] w-[25rem] bg-white rounded-md group shadow-md border-white border-8 p-2 first:ml-10 relative inline-block card align-top",
       "hover:mr-20 transition-all duration-200 delay-0 group-hover:delay-150 group-hover:ease-out z-10",
       isLink && "click-disabled cursor-pointer"
    ]}
    id={`card-${idx}`}
    style={`transform: translateX(${idx * -4}rem) rotate(${idx === 0 ? 0 : Math.floor(Math.random() * 3)}deg)`}
    _isClicked={"0"}
    _isClickDisabled={isLink || isClickDisabled}
    _meta={meta}
    href={isLink ? href : undefined}
    target={isExternalLink ? "_blank" : undefined}
    rel={isLink ? "noopener noreferrer" : undefined}
    onclick="onClick(this)"
>
    <div style={`background-image: url("${Paper.src}")`} class="absolute left-0 top-0 w-full h-full z-[1] bg-paper" />
    <div class="flex flex-col card-content-container gap-4">
        <div class="relative z-[2] h-[22rem] break-words rounded-md whitespace-normal overflow-hidden">
            <div class="card-img overflow-hidden">
                <img
                    src={cover}
                    class:list={[
                        "w-full h-[22rem] object-cover rounded-md brightness-[0.3] group-hover:brightness-90 transition-[filter] card-img",
                        "group-hover:-translate-y-4 transition-all",
                        delayRules
                    ]}
                    alt="cover image"
                />
            </div>
            <div class="card-content hidden opacity-0 px-1 text-left flex flex-col gap-4 h-[21rem] pr-10 overflow-y-auto">
                {Content ? <Content components={{ img: Img, a: A }} /> : null}
            </div>
        </div>
        <div class="px-1 z-[2] card-header">
            <div
                class:list={[
                    "text-zcool rounded-lg group-hover:-translate-y-4 text-left transition-transform card-title",
                    delayRules
                ]}
            >
                {title}
            </div>
            {
                subtitle ? <div 
                    class:list={[
                        "rounded-lg group-hover:opacity-100 opacity-0 transition group-hover:-translate-y-4 text-slate-700 card-subtitle",
                        delayRules,
                        href && "underline",
                        "flex gap-2 items-center truncate"
                    ]}
                >
                    {subtitle}
                    {isLink && isExternalLink && <ArrowUpRight className="w-[0.75rem] h-[0.75rem]" />}
                </div> : null
            }
            {
                techstack ? <div 
                    class:list={[
                        "rounded-lg group-hover:opacity-100 opacity-0 transition group-hover:-translate-y-4 text-slate-700 card-subtitle",
                        delayRules,
                        "flex gap-2 items-center mt-1"
                    ]}
                >
                    {techstack.map(t => <img src={t} class="h-6 w-6" />)}
                </div> : null
            }
        </div>
    </div>
    <div class="absolute top-5 right-5 flex gap-2 close-buttons hidden z-[2]" onclick="onCloseClick(this)">
        <div class="h-4 w-4 rounded-full bg-slate-200" />
        <div class="h-4 w-4 rounded-full bg-slate-200" />

        <div class="h-4 w-4 rounded-full bg-red-500 flex justify-center items-center">
            <X className="w-[10px] h-[10px] text-white" />
        </div>
    </div>
</Component>

<style>
    .opacity-50 {
        opacity: 0.5;
    }
</style>

<script>
    import { sleep } from "../lib/utils"
    import { animateIn, animateOut } from "../lib/card"
    import { animateEl } from "../lib/animate"

    const elOverlay = document.querySelector(".bg-overlay")
    elOverlay?.addEventListener("click", () => {
        // @ts-ignore: todo add the type to window.
        const idx = window.idx

        const activeCard = document.getElementById(idx)
        // @ts-ignore
        activeCard?.querySelector(".close-buttons")?.click()
    })

    // @ts-ignore create global function "onCloseClick"
    window.onCloseClick = (elCard: HTMLElement) => {
        const parent = elCard.parentNode as HTMLElement
        // @ts-ignore: todo add the type to window.
        window.onClick(parent, true)
    }

    // @ts-ignore create global function "onClick"
    window.onClick = async (elCard: HTMLElement, isClosing = false) => {
        const isClickDisabled = elCard.getAttribute("_isClickDisabled")
        if (isClickDisabled) return

        const elCardImage = elCard.querySelector(".card-img")
        const elCardContentContainer = elCard.querySelector(".card-content-container")
        const elCardHeader = elCard.querySelector(".card-header");
        const elCardSubtitle = elCard.querySelector(".card-subtitle")
        const elCardContent = elCard.querySelector(".card-content")
        const elBgPaper = elCard.querySelector(".bg-paper")
        const elCloseButtons = elCard.querySelector(".close-buttons")

        const isClicked = Boolean(+(elCard.getAttribute("_isClicked") ?? 0))

        if (!isClosing && isClicked) return
        const id = elCard.getAttribute("id")

        if (isClicked) {
            // @ts-ignore: todo add the type to window.
            window.idx = undefined

            // as the user may click on the overlay.
            elCard.dispatchEvent(new Event("mouseleave"))

            elCloseButtons?.classList.add("hidden")
            await animateIn({ elCard, elCardImage, elCardContentContainer, elCardHeader, elCardSubtitle, elCardContent, elBgPaper })
            animateEl(elOverlay, { opacity: 0 }, { duration: 400 }, {
                onFinish: async () => {
                    elOverlay?.classList.add("hidden")
                    elCard.setAttribute("_isClicked", "0")

                    elCard.classList.remove('z-50')
                    await sleep(100)
                    elCard?.classList.remove("mr-20");
                }
            })
        } else {
            elCard.classList.add("z-50")

            await animateOut({ elCard, elCardImage, elCardContentContainer, elCardHeader, elCardSubtitle, elCardContent, elBgPaper })

            elOverlay?.classList.remove("hidden")
            animateEl(elOverlay, { opacity: 0.5 }, { duration: 400, delay: 450 }, {
                onFinish: () => {
                    elCloseButtons?.classList.remove("hidden")
                },
            })

            // @ts-ignore: todo add the type to window.
            window.idx = id

            elCard.setAttribute("_isClicked", "1")
        }
    }
</script>