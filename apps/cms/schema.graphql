# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Config {
  id: ID!
  avatar: CloudinaryImage_File
  displayEmail: String
  displayName: String
  bio: String
  twitter: String
  github: String
  linkedin: String
  latitude: String
  longitude: String
  location: String
  spotify: String
  temperature: String
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input ConfigWhereUniqueInput {
  id: ID
}

input ConfigWhereInput {
  AND: [ConfigWhereInput!]
  OR: [ConfigWhereInput!]
  NOT: [ConfigWhereInput!]
  id: IDFilter
  displayEmail: StringFilter
  displayName: StringFilter
  bio: StringFilter
  twitter: StringFilter
  github: StringFilter
  linkedin: StringFilter
  latitude: StringFilter
  longitude: StringFilter
  location: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input ConfigOrderByInput {
  id: OrderDirection
  displayEmail: OrderDirection
  displayName: OrderDirection
  bio: OrderDirection
  twitter: OrderDirection
  github: OrderDirection
  linkedin: OrderDirection
  latitude: OrderDirection
  longitude: OrderDirection
  location: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ConfigUpdateInput {
  avatar: Upload
  displayEmail: String
  displayName: String
  bio: String
  twitter: String
  github: String
  linkedin: String
  latitude: String
  longitude: String
  location: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ConfigUpdateArgs {
  where: ConfigWhereUniqueInput! = {id: 1}
  data: ConfigUpdateInput!
}

input ConfigCreateInput {
  avatar: Upload
  displayEmail: String
  displayName: String
  bio: String
  twitter: String
  github: String
  linkedin: String
  latitude: String
  longitude: String
  location: String
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type Career {
  id: ID!
  index: Int
  published: Boolean
  title: String
  subTitle: String
  description: Career_description_Document
  createdAt: DateTime
  dateFrom: DateTime
  dateTo: DateTime
  cover: CloudinaryImage_File
  url: String
}

type Career_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input CareerWhereUniqueInput {
  id: ID
  index: Int
}

input CareerWhereInput {
  AND: [CareerWhereInput!]
  OR: [CareerWhereInput!]
  NOT: [CareerWhereInput!]
  id: IDFilter
  index: IntNullableFilter
  published: BooleanFilter
  title: StringFilter
  subTitle: StringFilter
  createdAt: DateTimeNullableFilter
  dateFrom: DateTimeFilter
  dateTo: DateTimeNullableFilter
  url: StringFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input CareerOrderByInput {
  id: OrderDirection
  index: OrderDirection
  published: OrderDirection
  title: OrderDirection
  subTitle: OrderDirection
  createdAt: OrderDirection
  dateFrom: OrderDirection
  dateTo: OrderDirection
  url: OrderDirection
}

input CareerUpdateInput {
  index: Int
  published: Boolean
  title: String
  subTitle: String
  description: JSON
  createdAt: DateTime
  dateFrom: DateTime
  dateTo: DateTime
  cover: Upload
  url: String
}

input CareerUpdateArgs {
  where: CareerWhereUniqueInput!
  data: CareerUpdateInput!
}

input CareerCreateInput {
  index: Int
  published: Boolean
  title: String
  subTitle: String
  description: JSON
  createdAt: DateTime
  dateFrom: DateTime
  dateTo: DateTime
  cover: Upload
  url: String
}

type Project {
  id: ID!
  index: Int
  published: Boolean
  title: String
  subTitle: String
  description: Project_description_Document
  cover: CloudinaryImage_File
}

type Project_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ProjectWhereUniqueInput {
  id: ID
  index: Int
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  index: IntNullableFilter
  published: BooleanFilter
  title: StringFilter
  subTitle: StringFilter
}

input ProjectOrderByInput {
  id: OrderDirection
  index: OrderDirection
  published: OrderDirection
  title: OrderDirection
  subTitle: OrderDirection
}

input ProjectUpdateInput {
  index: Int
  published: Boolean
  title: String
  subTitle: String
  description: JSON
  cover: Upload
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  index: Int
  published: Boolean
  title: String
  subTitle: String
  description: JSON
  cover: Upload
}

type Note {
  id: ID!
  title: String
  description: String
  slug: String
  published: Boolean
  publishedAt: DateTime
  createdAt: DateTime
  cover: CloudinaryImage_File
  content: Note_content_Document
}

type Note_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input NoteWhereUniqueInput {
  id: ID
}

input NoteWhereInput {
  AND: [NoteWhereInput!]
  OR: [NoteWhereInput!]
  NOT: [NoteWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  slug: StringFilter
  published: BooleanFilter
  publishedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input NoteOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  slug: OrderDirection
  published: OrderDirection
  publishedAt: OrderDirection
  createdAt: OrderDirection
}

input NoteUpdateInput {
  title: String
  description: String
  slug: String
  published: Boolean
  publishedAt: DateTime
  createdAt: DateTime
  cover: Upload
  content: JSON
}

input NoteUpdateArgs {
  where: NoteWhereUniqueInput!
  data: NoteUpdateInput!
}

input NoteCreateInput {
  title: String
  description: String
  slug: String
  published: Boolean
  publishedAt: DateTime
  createdAt: DateTime
  cover: Upload
  content: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createConfig(data: ConfigCreateInput!): Config
  createConfigs(data: [ConfigCreateInput!]!): [Config]
  updateConfig(where: ConfigWhereUniqueInput! = {id: 1}, data: ConfigUpdateInput!): Config
  updateConfigs(data: [ConfigUpdateArgs!]!): [Config]
  deleteConfig(where: ConfigWhereUniqueInput! = {id: 1}): Config
  deleteConfigs(where: [ConfigWhereUniqueInput!]!): [Config]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createCareer(data: CareerCreateInput!): Career
  createCareers(data: [CareerCreateInput!]!): [Career]
  updateCareer(where: CareerWhereUniqueInput!, data: CareerUpdateInput!): Career
  updateCareers(data: [CareerUpdateArgs!]!): [Career]
  deleteCareer(where: CareerWhereUniqueInput!): Career
  deleteCareers(where: [CareerWhereUniqueInput!]!): [Career]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(where: ProjectWhereUniqueInput!, data: ProjectUpdateInput!): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createNote(data: NoteCreateInput!): Note
  createNotes(data: [NoteCreateInput!]!): [Note]
  updateNote(where: NoteWhereUniqueInput!, data: NoteUpdateInput!): Note
  updateNotes(data: [NoteUpdateArgs!]!): [Note]
  deleteNote(where: NoteWhereUniqueInput!): Note
  deleteNotes(where: [NoteWhereUniqueInput!]!): [Note]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  configs(where: ConfigWhereInput! = {id: {equals: 1}}, orderBy: [ConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ConfigWhereUniqueInput): [Config!]
  config(where: ConfigWhereUniqueInput! = {id: 1}): Config
  configsCount(where: ConfigWhereInput! = {id: {equals: 1}}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  careers(where: CareerWhereInput! = {}, orderBy: [CareerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CareerWhereUniqueInput): [Career!]
  career(where: CareerWhereUniqueInput!): Career
  careersCount(where: CareerWhereInput! = {}): Int
  projects(where: ProjectWhereInput! = {}, orderBy: [ProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectWhereUniqueInput): [Project!]
  project(where: ProjectWhereUniqueInput!): Project
  projectsCount(where: ProjectWhereInput! = {}): Int
  notes(where: NoteWhereInput! = {}, orderBy: [NoteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NoteWhereUniqueInput): [Note!]
  note(where: NoteWhereUniqueInput!): Note
  notesCount(where: NoteWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
